

Docker — программное обеспечение для автоматизации развёртывания и управления приложениями 
в средах с поддержкой контейнеризации. Позволяет «упаковать» приложение со всем его окружением и зависимостями 
в контейнер, который может быть перенесён на любую систему.


Понятия

Docker-image
Docker-образ — это read-only шаблон. Каждый образ состоит из набора уровней. Docker использует union file system 
для сочетания этих уровней в один образ. Union file system позволяет файлам и директориями из разных файловых систем 
прозрачно накладываться, создавая когерентную файловую систему. 
Одна из причин, по которой docker легковесен — это использование таких уровней. Когда вы изменяете образ, например, 
обновляете приложение, создается новый уровень.
В основе каждого образа находится базовый образ. Например, ubuntu, базовый образ Ubuntu. 
Так же вы можете использовать образы как базу для создания новых образов. Например, если у вас есть образ apache, 
вы можете использовать его как базовый образ для ваших веб-приложений.
Образы используются для создания контейнеров. Docker позволяет легко создавать новые образы, 
обновлять существующие, или вы можете скачать образы созданные другими людьми.

Контейнеры
Контейнер создается из образа. Контейнеры могут быть созданы, запущены, остановлены, перенесены или удалены. 
Каждый контейнер собирается в полностью изолированном окружении и является безопасной платформой для приложения. 
Контейнер состоит из операционной системы, пользовательских файлов и метаданных.  
Образ говорит docker-у, что находится в контейнере, какой процесс запустить, когда запускается контейнер и 
другие конфигурационные данные. Когда docker запускает контейнер, он создает уровень для чтения/записи сверху образа, 
в котором может быть запущено приложение.

Реестр
Docker-реестр хранит образы. Есть публичные и приватные реестры, из которых можно скачать либо загрузить образы. 
Публичный Docker-реестр — это Docker Hub. Там хранится коллекция образов. Как вы знаете, образы могут быть созданы 
вами или вы можете использовать образы созданные другими. Реестры — это компонента распространения.


Пример функционирования

docker run -d -p 80:80 docker/getting-started
	-d (detached) — отвязывает среду выполнения от текущего терминала
	-p 80:80 — привязывает порт хоста на порт контейнера 
	docker/getting-started — какой образ использовать

docker run -i -t ubuntu /bin/bash

Docker, по порядку, делает следующее:
скачивает образ ubuntu, если его нет в система;
создает контейнер;
инициализирует файловую систему и монтирует read-only уровень;
инициализирует сеть/мост: создает сетевой интерфейс;
Установка IP адреса;
Запускает указанный процесс: запускает ваше приложение;
Обрабатывает и выдает вывод вашего приложения.


Файлы Dockerfile


Команды

docker images – список доступных в локальной системе образов
docker ps (-a) – список запусщенных контейнеров (-всех существующих в системе)
docker build – создать образ
docker rmi image_id – удаление образа
docker search имя_образа — поиск образа
docker pull имя_образа — скачать образ
docker exac имя_контейнера /bin/bash – выполнить команду в контейнере
docker commit имя_контейнера новое_имя_образа — создать образ из контейнера
docker stop (идентификатор) контейнера
docker rm (идентификатор) контейнера

attach - подключиться к запущенному контейнеру;
build - собрать образ из инструкций dockerfile;
commit - создать новый образ из изменений контейнера;
cp - копировать файлы между контейнером и файловой системой;
create - создать новый контейнер;
diff - проверить файловую систему контейнера;
events - посмотреть события от контейнера;
exec - выполнить команду в контейнере;
export - извлечь содержимое контейнера в архив;
history - посмотреть историю изменений образа;
images - список установленных образов;
import - создать контейнер из архива tar;
info - посмотреть информацию о системе;
inspect - посмотреть информацию о контейнере;
kill - остановить запущенный контейнер;
load - загрузить образ из архива;
login - авторизация в официальном репозитории Docker;
logout - выйти из репозитория Docker;
logs - посмотреть логи контейнера;
pause - приостановить все процессы контейнера;
port - подброс портов для контейнера;
ps - список запущенных контейнеров;
pull - скачать образ контейнера из репозитория;
push - отправить образ в репозиторий;
restart - перезапустить контейнер;
rm - удалить контейнер;
run - выполнить команду в контейнере;
save - сохранить образ в архив tar;
search - поиск образов в репозитории по заданному шаблону;
start - запустить контейнер;
stats - статистика использования ресурсов контейнером;
stop - остановить контейнер;
top - посмотреть запущенные процессы в контейнере;
unpause - проложить выполнение процессов в контейнере.





docker run 
	--name hello 		пользовательское имя
	-d 				    отвязан от терминала
	--rm 				удалится при остановке
	-p 8080:80 			проброс порта - порт_хоста: порт_контейнера
	-e TZ=Europe/Moscow	установка переменной окружения
	-v абс_путь_хост:абс_путь_контейнер
                        монтирует папку на хосте к контейнеру
	-it (--interactive) интерактивно, открывает stdin для контейнера
	helloworld			имя образа
	-tty                аллоцирует виртуальный терминал для контейнера
	/bin/ sh            это исполняемый файл, представляющий bash


Передача опции в рантайме

Dockerfile
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["sh", "-c", "java ${JAVA_OPTS} -jar /app.jar"]

команды
$ docker run -p 9000:9000 -e JAVA_OPTS=-Dserver.port=9000 myorg/myapp


Dockervolume

Volumes — механизм сохранения данных, создаваемых и используемых Docker контейнерами. Это папки на хосте, 
которые монтируются к контейнеру.

docker volume ls – просмотр папок докера
docker volume create имя — создание папки


Docker compose

Автоматизирует строку run




